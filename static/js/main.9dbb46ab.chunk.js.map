{"version":3,"sources":["components/Text.js","App.js","serviceWorker.js","index.js"],"names":["Text","props","textStyle","color","textColor","paddingLeft","paddingRight","paddingBottom","textAlign","minHeight","maxHeight","id","style","text","colors","App","state","fetchStatus","author","quoteColor","Math","floor","random","length","visible","getRandomQuote","bind","this","setState","fetch","corsURL","method","headers","then","response","json","data","console","log","key","quotes","quote","document","body","backgroundColor","catch","err","tweetStyle","newQuoteStyle","authorStyle","className","href","target","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OAoBeA,EAjBF,SAACC,GACb,IAAMC,EAAY,CACjBC,MAAOF,EAAMG,UACbC,YAAa,MACbC,aAAc,MACdC,cAAe,MACfC,UAAW,OACXC,UAAW,OACXC,UAAW,QAET,OACI,yBAAKC,GAAG,OAAOC,MAASV,GACrBD,EAAMY,OCXXC,G,MAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAoG1HC,E,YA9Fb,aAAgB,IAAD,8BACb,+CACKC,MAAQ,CACXC,YAAa,UACbJ,KAAM,GACNK,OAAQ,GACRC,WAAYL,EAAOM,KAAKC,MAAMD,KAAKE,UAAYR,EAAOS,OAAS,IAAM,GACrEC,SAAS,GAEX,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBATT,E,8EAYG,IAAD,OACfC,KAAKC,SAAS,CACRX,YAAa,YAEnBY,MAAMC,6KAAqB,CACzBC,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAMrBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,GAAIA,EAAM,CACRC,QAAQC,IAAIF,GACZ,IAAIG,EAAMnB,KAAKC,MAAMD,KAAKE,UAAYc,EAAKI,OAAOjB,OAAS,EAAI,IAAM,EACrE,EAAKK,SAAS,CACZX,YAAa,UACbJ,KAAMuB,EAAKI,OAAOD,GAAKE,MACvBvB,OAAQkB,EAAKI,OAAOD,GAAKrB,OACzBC,WAAYL,EAAOM,KAAKC,MAAMD,KAAKE,UAAYR,EAAOS,OAAS,IAAM,KAEvEmB,SAASC,KAAK/B,MAAMgC,gBAAkB,EAAK5B,MAAMG,eAGpD0B,OAAM,SAAAC,GACLT,QAAQC,IAAIQ,GACZ,EAAKlB,SAAS,CACVX,YAAa,c,0CAMnByB,SAASC,KAAK/B,MAAMgC,gBAAkBjB,KAAKX,MAAMG,WACjDQ,KAAKF,mB,+BAEI,IAAD,EACqCE,KAAKX,MAA3CH,EADC,EACDA,KAAKK,EADJ,EACIA,OAAOC,EADX,EACWA,WAAWF,EADtB,EACsBA,YACxB8B,EAAa,CACjBH,gBAAiBzB,GAEb6B,EAAgB,CACpBJ,gBAAiBzB,GAEb8B,EAAc,CAClB9C,MAAOgB,GAGT,OACE,yBAAK+B,UAAU,OACb,yBAAKvC,GAAG,aACW,YAAhBM,EACG,4CACiB,YAAhBA,EACC,kBAAC,EAAD,CAAMJ,KAAQA,EAAMT,UAAWe,IAChC,6CAED,yBAAKR,GAAG,SAASuC,UAVF,CAAC,IAU8BtC,MAASqC,GACpD/B,GAGP,yBAAKgC,UAAU,WACb,uBACAtC,MAAOmC,EACPpC,GAAG,cACHwC,KAAI,iEAA4DtC,EAA5D,aAAqEK,GACzEkC,OAAO,SAJP,SAKA,yBAAKxC,MAAOoC,EAAerC,GAAG,YAAY0C,QAAU1B,KAAKF,gBAAzD,oB,GAnFM6B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASoB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,iB","file":"static/js/main.9dbb46ab.chunk.js","sourcesContent":["import React from 'react'\r\n// import './Text.css';\r\n\r\nconst Text = (props) => {\r\n\tconst textStyle = {\r\n\t\tcolor: props.textColor,\r\n\t\tpaddingLeft: '2em',\r\n\t\tpaddingRight: '2em',\r\n\t\tpaddingBottom: '2em',\r\n\t\ttextAlign: 'left',\r\n\t\tminHeight: '15vh',\r\n\t\tmaxHeight: '15vh'\r\n\t}\r\n    return (\r\n        <div id=\"text\" style = {textStyle}>\r\n          {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Text","import React, {Component} from 'react';\nimport Text from './components/Text'\nimport './App.css';\n\nconst colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\nconst corsURL = 'https://cors-anywhere.herokuapp.com/'\nconst remoteURL = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n// const localURL = 'http://127.0.0.1:3000'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      fetchStatus: 'waiting',\n      text: '',\n      author: '',\n      quoteColor: colors[Math.floor(Math.random() * (colors.length - 0)) + 0],\n      visible: true\n    }\n    this.getRandomQuote = this.getRandomQuote.bind(this)\n  }\n\n  getRandomQuote() {\n    this.setState({\n          fetchStatus: 'waiting',\n        })\n    fetch(corsURL + remoteURL, {\n      method: 'get',\n      headers: {\n          'content-type': 'application/json'\n      },\n      // body: JSON.stringify({\n      //     id: this.state.user.id\n      // })\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data) {\n        console.log(data)\n        let key = Math.floor(Math.random() * (data.quotes.length - 0 + 1)) + 0;\n        this.setState({\n          fetchStatus: 'success',\n          text: data.quotes[key].quote,\n          author: data.quotes[key].author,\n          quoteColor: colors[Math.floor(Math.random() * (colors.length - 0)) + 0]\n        }) \n        document.body.style.backgroundColor = this.state.quoteColor;\n      } \n    })\n    .catch(err => {\n      console.log(err)\n      this.setState({\n          fetchStatus: 'fail',\n        })\n    })\n  }\n\n  componentDidMount() {\n    document.body.style.backgroundColor = this.state.quoteColor;\n    this.getRandomQuote()\n  }\n  render () {\n    const {text,author,quoteColor,fetchStatus} = this.state\n    const tweetStyle = {\n      backgroundColor: quoteColor\n    }\n    const newQuoteStyle = {\n      backgroundColor: quoteColor\n    }\n    const authorStyle = {\n      color: quoteColor\n    }\n    const componentClasses = [''];\n    return (\n      <div className=\"App\">\n        <div id=\"quote-box\">\n          {fetchStatus === 'waiting'\n            ? <div>Fetching...</div>\n            : (fetchStatus === 'success' \n              ? <Text text = {text} textColor={quoteColor} />\n              :<div>Cannot Fetch</div>) \n          }\n              <div id=\"author\" className={componentClasses} style = {authorStyle}>\n                {author}\n              </div>\n            \n          <div className='buttons'>\n            <a \n            style={tweetStyle} \n            id=\"tweet-quote\" \n            href={`https://twitter.com/intent/tweet?hashtags=quotes&text=\"${text}\" ${author}`}\n            target='blank'>Tweet</a>\n            <div style={newQuoteStyle} id=\"new-quote\" onClick= {this.getRandomQuote}>\n              New Quote\n            </div>\n          </div>\n        </div>\n        \n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}